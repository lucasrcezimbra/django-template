name: Test Generated Project
on: [push, pull_request]
jobs:
  test-generated:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: test_project.settings.local
      DJANGO_SECRET_KEY: test-key-for-ci
      DATABASE_URL: sqlite:///db.sqlite3
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pipx install poetry
          poetry install
      - name: Generate project
        run: |
          poetry run cookiecutter . --no-input \
            project_name="Test Project" \
            project_slug="test_project" \
            description="Test project for CI" \
            database="SQLite" \
            author_name="OpenHands" \
            author_email="openhands@all-hands.dev" \
            python_version="3.11" \
            api="Django Ninja" \
            html="HTMX" \
            use_sentry="y"
      - name: Verify project structure
        run: |
          test -d test_project || (echo "Project directory not created" && exit 1)
          test -f test_project/pyproject.toml || (echo "pyproject.toml not found" && exit 1)
          test -f test_project/manage.py || (echo "manage.py not found" && exit 1)
          test -d test_project/test_project || (echo "Django project directory not found" && exit 1)
      - name: Install generated project dependencies
        working-directory: ./test_project
        run: |
          poetry install
      - name: Run linting and type checking
        working-directory: ./test_project
        run: |
          poetry run pre-commit run -a
          poetry run ruff check .
          poetry run black . --check
          poetry run isort . --check-only
          poetry run mypy .
      - name: Run tests
        working-directory: ./test_project
        run: |
          poetry run pytest -v
